Qus link : https://practice.geeksforgeeks.org/problems/minimum-cost-path/0/

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
int r[4] = {0,0,1,-1};
int c[4] = {1,-1,0,0};
int main()
 {
	//code
	ll t;
	cin>>t;
	while(t--){
	   int n;
	   cin>>n;
	   int x;
	   vector<vector<int>> g;
	   for(int i=0;i<n;i++){
	       vector<int> v;
	       for(int j=0;j<n;j++){
	           cin>>x;
	           v.push_back(x);
	       }g.push_back(v);
	   }
	   vector<vector<int>> dist(n, vector<int>(n, INT_MAX));
	   dist[0][0] = g[0][0];
	   queue<pair<int,int>> qp;
	   qp.push(make_pair(0, 0));
	   while(!qp.empty()){
	       pair<int,int> p = qp.front();
	       qp.pop();
	       int a1 = p.first;
	       int b1 = p.second;
	       for(int i=0; i<4; ++i){
	           int e1 = a1 + r[i];
	           int e2 = b1 + c[i];
	           if(e1>=0 && e2>=0 && e1<n && e2<n && dist[e1][e2] > g[e1][e2]+dist[a1][b1]){
	               dist[e1][e2] = g[e1][e2]+dist[a1][b1];
	               qp.push(make_pair(e1,e2));
	           }
	       }
	   }
	   cout<<dist[n-1][n-1]<<endl;
	}
	return 0;
}
