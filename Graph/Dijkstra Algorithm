Qus link : https://practice.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1/?track=ppc-graph&batchId=221

#include<bits/stdc++.h>
using namespace std;

vector <int> dijkstra(vector<vector<int>> , int ,int );

int printSolution(vector <int> dist, int n)
{
  
   for (int i = 0; i < n; i++)
      printf("%d ", dist[i]);
  
}
int main()
{
    int t;
    int V;
    cin>>t;
    while(t--){
        cin>>V;
        
        vector<vector<int>> g(V);
        
        for(int i = 0;i<V;i++){
            vector<int> temp(V);
            g[i] = temp;
        }
        
        for(int i=0;i<V;i++)
        {
      	    for(int j=0;j<V;j++)
      	    {
      		    cin>>g[i][j];
      	    }
        }
        
        int s;
        cin>>s;
        
        vector <int> res = dijkstra(g, s, V);
        printSolution (res, V);
        cout<<endl;
       }
        return 0;
}// } Driver Code Ends


/*  Function to implement Dijkstra
*   g: vector of vectors which represents the graph
*   src: source vertex to start traversing graph with
*   V: number of vertices
*/
//my code begin
int mindist(vector<bool> vis, vector<int> dist){
    int min=INT_MAX, minele;
    for(int i=0;i<vis.size();i++){
        if(!vis[i] && dist[i]<=min){
            min = dist[i];
            minele=i;
        }
    }
    return minele;
}
vector <int> dijkstra(vector<vector<int>> g, int src, int v)
{
    // Your code here
    vector<bool> vis(v, false);
    vector<int> dist(v, INT_MAX);
    dist[src]=0;
    //vis[src]=true;
    
    for(int count=0; count<v-1; count++){
        int u = mindist(vis, dist);
        vis[u]=true;
        //vis[u]
        for(int j=0;j<v;j++){
            int w =g[u][j];
            if(!vis[j] && dist[u]!=INT_MAX && g[u][j] && dist[u]+w < dist[j]){
                dist[j] = dist[u] + w;
            }
        }
    }
    return dist;
}
//my code end
