Qus link : https://practice.geeksforgeeks.org/problems/minimum-spanning-tree/1#comment-4988803107

#include <bits/stdc++.h>
using namespace std;
int spanningTree(int V, int E, vector<vector<int>> &graph);
// Driver code

int main() {
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int> > graph(V, vector<int>(V, INT_MAX));
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            u--, v--;
            graph[u][v] = w;
            graph[v][u] = w;
        }

        cout << spanningTree(V, E, graph) << endl;
    }
    return 0;
}
// } Driver Code Ends


// Function to construct and print MST for
// a graph represented using adjacency
// matrix representation, with V vertices.
// graph[i][j] = weight if edge exits else INT_MAX
int minkey(vector<int> key, vector<bool> vis){
    int min = INT_MAX;
    int minele;
    for(int i=0;i<key.size();++i){
        if(!vis[i] && key[i]<min){
            min = key[i];
            minele = i;
        }
    }
    return minele;
}
int spanningTree(int V, int E, vector<vector<int>> &graph) {
    // code here
    vector<bool> vis(V, false);
    vector<int> key(V, INT_MAX);
    //vector<int> parent(V, -1);
    int sum = 0;
    key[0] = 0;
    for(int c=0; c<V-1; ++c){
        int u = minkey(key, vis);
        vis[u] = true;
        for(int v=0; v<V; ++v){
            if(!vis[v] && graph[u][v]  && graph[u][v]<key[v]){
                //sum+=graph[u][v];
                //parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }
    for(int i=1;i<V;i++){
        //if(parent[i]!=INT_MAX && parent[i]!=-1)
        sum+=key[i];
    }
    return sum;
}
