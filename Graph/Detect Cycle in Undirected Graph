Qus Link : https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1/?track=ppc-graph&batchId=221

#include<bits/stdc++.h>
using namespace std;
//user code  start
bool dfs(vector<int> adj[], vector<bool>& vis, int i, int parent){
    vis[i]=true;
    for(auto it=adj[i].begin();it!=adj[i].end();it++){
        if(!vis[*it]){
            if(dfs(adj,vis,*it,i))  //parent yha change hota h
               return true;
        }
        else{
            if(parent != *it){
               return true;
            }
        }
    }
    return false;
}
bool isCyclic(vector<int> adj[], int v)
{
    //int s=0;
    
    vector<bool>vis(v, false);
    for(int i=0;i<v;i++){
        if(!vis[i])
        if(dfs(adj, vis, i, -1))
        return true;
    }
    return false;
}
//user code ends.

int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        int V, E;
        cin>>V>>E;
        
        // array of vectors to represent graph
        vector<int> adj[V];
        
        int u, v;
        for(int i=0;i<E;i++)
        {
            cin>>u>>v;
            
            // adding edge to the graph
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        cout << isCyclic(adj, V)<<endl;

    }
}
