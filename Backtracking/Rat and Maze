Qus link : https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1

#include <bits/stdc++.h>
using namespace std;

#define MAX 5
vector<string> printPath(int m[MAX][MAX], int n);

// Position this line where user code will be pasted.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;

        int m[MAX][MAX];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }

        vector<string> result = printPath(m, n);
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}// } Driver Code Ends


// User function template for C++

// m is the given matrix and n is the order of matrix
// MAX is the upper limit of N ie 5
//vector<string> ans;
void dfs(vector<vector<int>> v, int n, int i, int j, vector<vector<bool>>& vis, string s, vector<string>& ans){
    if(i<0||j<0||i>=n||j>=n||v[i][j]==0||vis[i][j]==true)
    return ;
    
    else if(i==n-1 && j==n-1){
        ans.push_back(s);
        return;
    }
    else{
        vis[i][j]=true;
        dfs(v,n,i+1,j,vis,s+"D",ans);
        dfs(v,n,i,j-1,vis,s+"L",ans);
        dfs(v,n,i,j+1,vis,s+"R",ans);
        dfs(v,n,i-1,j,vis,s+"U",ans);
        vis[i][j]=false;
    }
}
vector<string> printPath(int m[MAX][MAX], int n) {
    // Your code goes here
    vector<vector<int>> v(n, vector<int>(n, 0));
    for(int i=0;i<n;i++)
    for(int j=0;j<n;j++)
    v[i][j] = m[i][j];
    
    vector<vector<bool>> vis(n, vector<bool>(n, false));
    //vis[0][0]=true;
    vector<string> ans;
    string s="";
    dfs(v,n,0,0,vis,s,ans);
    
    return ans;
}
